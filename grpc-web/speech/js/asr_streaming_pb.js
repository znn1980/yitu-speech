// source: asr_streaming.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.AudioConfig', null, global);
goog.exportSymbol('proto.AudioConfig.AudioEncoding', null, global);
goog.exportSymbol('proto.SpeechConfig', null, global);
goog.exportSymbol('proto.SpeechConfig.Language', null, global);
goog.exportSymbol('proto.SpeechConfig.RecognizeType', null, global);
goog.exportSymbol('proto.SpeechConfig.Scene', null, global);
goog.exportSymbol('proto.StreamingSpeechConfig', null, global);
goog.exportSymbol('proto.StreamingSpeechRequest', null, global);
goog.exportSymbol('proto.StreamingSpeechRequest.RequestpayloadCase', null, global);
goog.exportSymbol('proto.StreamingSpeechResponse', null, global);
goog.exportSymbol('proto.StreamingSpeechResult', null, global);
goog.exportSymbol('proto.StreamingSpeechStatus', null, global);
goog.exportSymbol('proto.StreamingTranscription', null, global);
goog.exportSymbol('proto.StreamingTranscriptionPiece', null, global);
goog.exportSymbol('proto.WordsReplace', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AudioConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AudioConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AudioConfig.displayName = 'proto.AudioConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpeechConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SpeechConfig.repeatedFields_, null);
};
goog.inherits(proto.SpeechConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpeechConfig.displayName = 'proto.SpeechConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WordsReplace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WordsReplace.repeatedFields_, null);
};
goog.inherits(proto.WordsReplace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.WordsReplace.displayName = 'proto.WordsReplace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StreamingSpeechConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StreamingSpeechConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StreamingSpeechConfig.displayName = 'proto.StreamingSpeechConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StreamingSpeechRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.StreamingSpeechRequest.oneofGroups_);
};
goog.inherits(proto.StreamingSpeechRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StreamingSpeechRequest.displayName = 'proto.StreamingSpeechRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StreamingSpeechResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StreamingSpeechResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StreamingSpeechResponse.displayName = 'proto.StreamingSpeechResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StreamingSpeechResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StreamingSpeechResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StreamingSpeechResult.displayName = 'proto.StreamingSpeechResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StreamingSpeechStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StreamingSpeechStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StreamingSpeechStatus.displayName = 'proto.StreamingSpeechStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StreamingTranscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StreamingTranscription.repeatedFields_, null);
};
goog.inherits(proto.StreamingTranscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StreamingTranscription.displayName = 'proto.StreamingTranscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StreamingTranscriptionPiece = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StreamingTranscriptionPiece, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StreamingTranscriptionPiece.displayName = 'proto.StreamingTranscriptionPiece';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AudioConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.AudioConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AudioConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AudioConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    aue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    samplerate: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AudioConfig}
 */
proto.AudioConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AudioConfig;
  return proto.AudioConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AudioConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AudioConfig}
 */
proto.AudioConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.AudioConfig.AudioEncoding} */ (reader.readEnum());
      msg.setAue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSamplerate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AudioConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AudioConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AudioConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AudioConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAue();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSamplerate();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.AudioConfig.AudioEncoding = {
  UNSPECIFIED: 0,
  PCM: 1,
  AAC: 2,
  MPEG2: 3
};

/**
 * optional AudioEncoding aue = 1;
 * @return {!proto.AudioConfig.AudioEncoding}
 */
proto.AudioConfig.prototype.getAue = function() {
  return /** @type {!proto.AudioConfig.AudioEncoding} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.AudioConfig.AudioEncoding} value
 * @return {!proto.AudioConfig} returns this
 */
proto.AudioConfig.prototype.setAue = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 sampleRate = 2;
 * @return {number}
 */
proto.AudioConfig.prototype.getSamplerate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.AudioConfig} returns this
 */
proto.AudioConfig.prototype.setSamplerate = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SpeechConfig.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpeechConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.SpeechConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpeechConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpeechConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    lang: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scene: jspb.Message.getFieldWithDefault(msg, 2, 0),
    customwordList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    usecustomwordsidList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    recognizetype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    disableconvertnumber: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    disablepunctuation: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    wordsreplace: (f = msg.getWordsreplace()) && proto.WordsReplace.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpeechConfig}
 */
proto.SpeechConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpeechConfig;
  return proto.SpeechConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpeechConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpeechConfig}
 */
proto.SpeechConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SpeechConfig.Language} */ (reader.readEnum());
      msg.setLang(value);
      break;
    case 2:
      var value = /** @type {!proto.SpeechConfig.Scene} */ (reader.readEnum());
      msg.setScene(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addCustomword(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setUsecustomwordsidList(value);
      break;
    case 5:
      var value = /** @type {!proto.SpeechConfig.RecognizeType} */ (reader.readEnum());
      msg.setRecognizetype(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableconvertnumber(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisablepunctuation(value);
      break;
    case 8:
      var value = new proto.WordsReplace;
      reader.readMessage(value,proto.WordsReplace.deserializeBinaryFromReader);
      msg.setWordsreplace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpeechConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpeechConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpeechConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpeechConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLang();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getScene();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCustomwordList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getUsecustomwordsidList();
  if (f.length > 0) {
    writer.writePackedInt32(
      4,
      f
    );
  }
  f = message.getRecognizetype();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getDisableconvertnumber();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDisablepunctuation();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getWordsreplace();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.WordsReplace.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.SpeechConfig.Language = {
  UNSPECIFIED: 0,
  MANDARIN: 1
};

/**
 * @enum {number}
 */
proto.SpeechConfig.Scene = {
  GENERALSCENE: 0
};

/**
 * @enum {number}
 */
proto.SpeechConfig.RecognizeType = {
  ALL: 0,
  UTTERANCE: 1,
  STREAMING: 2
};

/**
 * optional Language lang = 1;
 * @return {!proto.SpeechConfig.Language}
 */
proto.SpeechConfig.prototype.getLang = function() {
  return /** @type {!proto.SpeechConfig.Language} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.SpeechConfig.Language} value
 * @return {!proto.SpeechConfig} returns this
 */
proto.SpeechConfig.prototype.setLang = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Scene scene = 2;
 * @return {!proto.SpeechConfig.Scene}
 */
proto.SpeechConfig.prototype.getScene = function() {
  return /** @type {!proto.SpeechConfig.Scene} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.SpeechConfig.Scene} value
 * @return {!proto.SpeechConfig} returns this
 */
proto.SpeechConfig.prototype.setScene = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated string customWord = 3;
 * @return {!Array<string>}
 */
proto.SpeechConfig.prototype.getCustomwordList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SpeechConfig} returns this
 */
proto.SpeechConfig.prototype.setCustomwordList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SpeechConfig} returns this
 */
proto.SpeechConfig.prototype.addCustomword = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpeechConfig} returns this
 */
proto.SpeechConfig.prototype.clearCustomwordList = function() {
  return this.setCustomwordList([]);
};


/**
 * repeated int32 useCustomWordsId = 4;
 * @return {!Array<number>}
 */
proto.SpeechConfig.prototype.getUsecustomwordsidList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.SpeechConfig} returns this
 */
proto.SpeechConfig.prototype.setUsecustomwordsidList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.SpeechConfig} returns this
 */
proto.SpeechConfig.prototype.addUsecustomwordsid = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpeechConfig} returns this
 */
proto.SpeechConfig.prototype.clearUsecustomwordsidList = function() {
  return this.setUsecustomwordsidList([]);
};


/**
 * optional RecognizeType recognizeType = 5;
 * @return {!proto.SpeechConfig.RecognizeType}
 */
proto.SpeechConfig.prototype.getRecognizetype = function() {
  return /** @type {!proto.SpeechConfig.RecognizeType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.SpeechConfig.RecognizeType} value
 * @return {!proto.SpeechConfig} returns this
 */
proto.SpeechConfig.prototype.setRecognizetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional bool disableConvertNumber = 6;
 * @return {boolean}
 */
proto.SpeechConfig.prototype.getDisableconvertnumber = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpeechConfig} returns this
 */
proto.SpeechConfig.prototype.setDisableconvertnumber = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool disablePunctuation = 7;
 * @return {boolean}
 */
proto.SpeechConfig.prototype.getDisablepunctuation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpeechConfig} returns this
 */
proto.SpeechConfig.prototype.setDisablepunctuation = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional WordsReplace wordsReplace = 8;
 * @return {?proto.WordsReplace}
 */
proto.SpeechConfig.prototype.getWordsreplace = function() {
  return /** @type{?proto.WordsReplace} */ (
    jspb.Message.getWrapperField(this, proto.WordsReplace, 8));
};


/**
 * @param {?proto.WordsReplace|undefined} value
 * @return {!proto.SpeechConfig} returns this
*/
proto.SpeechConfig.prototype.setWordsreplace = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpeechConfig} returns this
 */
proto.SpeechConfig.prototype.clearWordsreplace = function() {
  return this.setWordsreplace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpeechConfig.prototype.hasWordsreplace = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WordsReplace.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WordsReplace.prototype.toObject = function(opt_includeInstance) {
  return proto.WordsReplace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WordsReplace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WordsReplace.toObject = function(includeInstance, msg) {
  var f, obj = {
    keywordsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    replaceList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WordsReplace}
 */
proto.WordsReplace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WordsReplace;
  return proto.WordsReplace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WordsReplace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WordsReplace}
 */
proto.WordsReplace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeywords(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addReplace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WordsReplace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WordsReplace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WordsReplace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WordsReplace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeywordsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getReplaceList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string keywords = 1;
 * @return {!Array<string>}
 */
proto.WordsReplace.prototype.getKeywordsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.WordsReplace} returns this
 */
proto.WordsReplace.prototype.setKeywordsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.WordsReplace} returns this
 */
proto.WordsReplace.prototype.addKeywords = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.WordsReplace} returns this
 */
proto.WordsReplace.prototype.clearKeywordsList = function() {
  return this.setKeywordsList([]);
};


/**
 * repeated string replace = 2;
 * @return {!Array<string>}
 */
proto.WordsReplace.prototype.getReplaceList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.WordsReplace} returns this
 */
proto.WordsReplace.prototype.setReplaceList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.WordsReplace} returns this
 */
proto.WordsReplace.prototype.addReplace = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.WordsReplace} returns this
 */
proto.WordsReplace.prototype.clearReplaceList = function() {
  return this.setReplaceList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StreamingSpeechConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.StreamingSpeechConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StreamingSpeechConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamingSpeechConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioconfig: (f = msg.getAudioconfig()) && proto.AudioConfig.toObject(includeInstance, f),
    speechconfig: (f = msg.getSpeechconfig()) && proto.SpeechConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StreamingSpeechConfig}
 */
proto.StreamingSpeechConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StreamingSpeechConfig;
  return proto.StreamingSpeechConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StreamingSpeechConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StreamingSpeechConfig}
 */
proto.StreamingSpeechConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AudioConfig;
      reader.readMessage(value,proto.AudioConfig.deserializeBinaryFromReader);
      msg.setAudioconfig(value);
      break;
    case 2:
      var value = new proto.SpeechConfig;
      reader.readMessage(value,proto.SpeechConfig.deserializeBinaryFromReader);
      msg.setSpeechconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StreamingSpeechConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StreamingSpeechConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StreamingSpeechConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamingSpeechConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudioconfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AudioConfig.serializeBinaryToWriter
    );
  }
  f = message.getSpeechconfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SpeechConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional AudioConfig audioConfig = 1;
 * @return {?proto.AudioConfig}
 */
proto.StreamingSpeechConfig.prototype.getAudioconfig = function() {
  return /** @type{?proto.AudioConfig} */ (
    jspb.Message.getWrapperField(this, proto.AudioConfig, 1));
};


/**
 * @param {?proto.AudioConfig|undefined} value
 * @return {!proto.StreamingSpeechConfig} returns this
*/
proto.StreamingSpeechConfig.prototype.setAudioconfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.StreamingSpeechConfig} returns this
 */
proto.StreamingSpeechConfig.prototype.clearAudioconfig = function() {
  return this.setAudioconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StreamingSpeechConfig.prototype.hasAudioconfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SpeechConfig speechConfig = 2;
 * @return {?proto.SpeechConfig}
 */
proto.StreamingSpeechConfig.prototype.getSpeechconfig = function() {
  return /** @type{?proto.SpeechConfig} */ (
    jspb.Message.getWrapperField(this, proto.SpeechConfig, 2));
};


/**
 * @param {?proto.SpeechConfig|undefined} value
 * @return {!proto.StreamingSpeechConfig} returns this
*/
proto.StreamingSpeechConfig.prototype.setSpeechconfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.StreamingSpeechConfig} returns this
 */
proto.StreamingSpeechConfig.prototype.clearSpeechconfig = function() {
  return this.setSpeechconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StreamingSpeechConfig.prototype.hasSpeechconfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.StreamingSpeechRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.StreamingSpeechRequest.RequestpayloadCase = {
  REQUESTPAYLOAD_NOT_SET: 0,
  STREAMINGSPEECHCONFIG: 1,
  AUDIODATA: 2
};

/**
 * @return {proto.StreamingSpeechRequest.RequestpayloadCase}
 */
proto.StreamingSpeechRequest.prototype.getRequestpayloadCase = function() {
  return /** @type {proto.StreamingSpeechRequest.RequestpayloadCase} */(jspb.Message.computeOneofCase(this, proto.StreamingSpeechRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StreamingSpeechRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.StreamingSpeechRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StreamingSpeechRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamingSpeechRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamingspeechconfig: (f = msg.getStreamingspeechconfig()) && proto.StreamingSpeechConfig.toObject(includeInstance, f),
    audiodata: msg.getAudiodata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StreamingSpeechRequest}
 */
proto.StreamingSpeechRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StreamingSpeechRequest;
  return proto.StreamingSpeechRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StreamingSpeechRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StreamingSpeechRequest}
 */
proto.StreamingSpeechRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.StreamingSpeechConfig;
      reader.readMessage(value,proto.StreamingSpeechConfig.deserializeBinaryFromReader);
      msg.setStreamingspeechconfig(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudiodata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StreamingSpeechRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StreamingSpeechRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StreamingSpeechRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamingSpeechRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamingspeechconfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.StreamingSpeechConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional StreamingSpeechConfig streamingSpeechConfig = 1;
 * @return {?proto.StreamingSpeechConfig}
 */
proto.StreamingSpeechRequest.prototype.getStreamingspeechconfig = function() {
  return /** @type{?proto.StreamingSpeechConfig} */ (
    jspb.Message.getWrapperField(this, proto.StreamingSpeechConfig, 1));
};


/**
 * @param {?proto.StreamingSpeechConfig|undefined} value
 * @return {!proto.StreamingSpeechRequest} returns this
*/
proto.StreamingSpeechRequest.prototype.setStreamingspeechconfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.StreamingSpeechRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.StreamingSpeechRequest} returns this
 */
proto.StreamingSpeechRequest.prototype.clearStreamingspeechconfig = function() {
  return this.setStreamingspeechconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StreamingSpeechRequest.prototype.hasStreamingspeechconfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes audioData = 2;
 * @return {string}
 */
proto.StreamingSpeechRequest.prototype.getAudiodata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes audioData = 2;
 * This is a type-conversion wrapper around `getAudiodata()`
 * @return {string}
 */
proto.StreamingSpeechRequest.prototype.getAudiodata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudiodata()));
};


/**
 * optional bytes audioData = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudiodata()`
 * @return {!Uint8Array}
 */
proto.StreamingSpeechRequest.prototype.getAudiodata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudiodata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.StreamingSpeechRequest} returns this
 */
proto.StreamingSpeechRequest.prototype.setAudiodata = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.StreamingSpeechRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.StreamingSpeechRequest} returns this
 */
proto.StreamingSpeechRequest.prototype.clearAudiodata = function() {
  return jspb.Message.setOneofField(this, 2, proto.StreamingSpeechRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StreamingSpeechRequest.prototype.hasAudiodata = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StreamingSpeechResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.StreamingSpeechResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StreamingSpeechResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamingSpeechResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    globalstreamid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    result: (f = msg.getResult()) && proto.StreamingSpeechResult.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && proto.StreamingSpeechStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StreamingSpeechResponse}
 */
proto.StreamingSpeechResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StreamingSpeechResponse;
  return proto.StreamingSpeechResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StreamingSpeechResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StreamingSpeechResponse}
 */
proto.StreamingSpeechResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGlobalstreamid(value);
      break;
    case 2:
      var value = new proto.StreamingSpeechResult;
      reader.readMessage(value,proto.StreamingSpeechResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 3:
      var value = new proto.StreamingSpeechStatus;
      reader.readMessage(value,proto.StreamingSpeechStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StreamingSpeechResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StreamingSpeechResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StreamingSpeechResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamingSpeechResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGlobalstreamid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.StreamingSpeechResult.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.StreamingSpeechStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional string globalStreamId = 1;
 * @return {string}
 */
proto.StreamingSpeechResponse.prototype.getGlobalstreamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.StreamingSpeechResponse} returns this
 */
proto.StreamingSpeechResponse.prototype.setGlobalstreamid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StreamingSpeechResult result = 2;
 * @return {?proto.StreamingSpeechResult}
 */
proto.StreamingSpeechResponse.prototype.getResult = function() {
  return /** @type{?proto.StreamingSpeechResult} */ (
    jspb.Message.getWrapperField(this, proto.StreamingSpeechResult, 2));
};


/**
 * @param {?proto.StreamingSpeechResult|undefined} value
 * @return {!proto.StreamingSpeechResponse} returns this
*/
proto.StreamingSpeechResponse.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.StreamingSpeechResponse} returns this
 */
proto.StreamingSpeechResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StreamingSpeechResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StreamingSpeechStatus status = 3;
 * @return {?proto.StreamingSpeechStatus}
 */
proto.StreamingSpeechResponse.prototype.getStatus = function() {
  return /** @type{?proto.StreamingSpeechStatus} */ (
    jspb.Message.getWrapperField(this, proto.StreamingSpeechStatus, 3));
};


/**
 * @param {?proto.StreamingSpeechStatus|undefined} value
 * @return {!proto.StreamingSpeechResponse} returns this
*/
proto.StreamingSpeechResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.StreamingSpeechResponse} returns this
 */
proto.StreamingSpeechResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StreamingSpeechResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StreamingSpeechResult.prototype.toObject = function(opt_includeInstance) {
  return proto.StreamingSpeechResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StreamingSpeechResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamingSpeechResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    isfinal: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    besttranscription: (f = msg.getBesttranscription()) && proto.StreamingTranscription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StreamingSpeechResult}
 */
proto.StreamingSpeechResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StreamingSpeechResult;
  return proto.StreamingSpeechResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StreamingSpeechResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StreamingSpeechResult}
 */
proto.StreamingSpeechResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsfinal(value);
      break;
    case 2:
      var value = new proto.StreamingTranscription;
      reader.readMessage(value,proto.StreamingTranscription.deserializeBinaryFromReader);
      msg.setBesttranscription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StreamingSpeechResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StreamingSpeechResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StreamingSpeechResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamingSpeechResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsfinal();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getBesttranscription();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.StreamingTranscription.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool isFinal = 1;
 * @return {boolean}
 */
proto.StreamingSpeechResult.prototype.getIsfinal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.StreamingSpeechResult} returns this
 */
proto.StreamingSpeechResult.prototype.setIsfinal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional StreamingTranscription bestTranscription = 2;
 * @return {?proto.StreamingTranscription}
 */
proto.StreamingSpeechResult.prototype.getBesttranscription = function() {
  return /** @type{?proto.StreamingTranscription} */ (
    jspb.Message.getWrapperField(this, proto.StreamingTranscription, 2));
};


/**
 * @param {?proto.StreamingTranscription|undefined} value
 * @return {!proto.StreamingSpeechResult} returns this
*/
proto.StreamingSpeechResult.prototype.setBesttranscription = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.StreamingSpeechResult} returns this
 */
proto.StreamingSpeechResult.prototype.clearBesttranscription = function() {
  return this.setBesttranscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StreamingSpeechResult.prototype.hasBesttranscription = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StreamingSpeechStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.StreamingSpeechStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StreamingSpeechStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamingSpeechStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    processedtimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StreamingSpeechStatus}
 */
proto.StreamingSpeechStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StreamingSpeechStatus;
  return proto.StreamingSpeechStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StreamingSpeechStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StreamingSpeechStatus}
 */
proto.StreamingSpeechStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProcessedtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StreamingSpeechStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StreamingSpeechStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StreamingSpeechStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamingSpeechStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessedtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 processedTimestamp = 1;
 * @return {number}
 */
proto.StreamingSpeechStatus.prototype.getProcessedtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.StreamingSpeechStatus} returns this
 */
proto.StreamingSpeechStatus.prototype.setProcessedtimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StreamingTranscription.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StreamingTranscription.prototype.toObject = function(opt_includeInstance) {
  return proto.StreamingTranscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StreamingTranscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamingTranscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    transcribedtext: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pieceList: jspb.Message.toObjectList(msg.getPieceList(),
    proto.StreamingTranscriptionPiece.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StreamingTranscription}
 */
proto.StreamingTranscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StreamingTranscription;
  return proto.StreamingTranscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StreamingTranscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StreamingTranscription}
 */
proto.StreamingTranscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranscribedtext(value);
      break;
    case 2:
      var value = new proto.StreamingTranscriptionPiece;
      reader.readMessage(value,proto.StreamingTranscriptionPiece.deserializeBinaryFromReader);
      msg.addPiece(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StreamingTranscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StreamingTranscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StreamingTranscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamingTranscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranscribedtext();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPieceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.StreamingTranscriptionPiece.serializeBinaryToWriter
    );
  }
};


/**
 * optional string transcribedText = 1;
 * @return {string}
 */
proto.StreamingTranscription.prototype.getTranscribedtext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.StreamingTranscription} returns this
 */
proto.StreamingTranscription.prototype.setTranscribedtext = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated StreamingTranscriptionPiece piece = 2;
 * @return {!Array<!proto.StreamingTranscriptionPiece>}
 */
proto.StreamingTranscription.prototype.getPieceList = function() {
  return /** @type{!Array<!proto.StreamingTranscriptionPiece>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.StreamingTranscriptionPiece, 2));
};


/**
 * @param {!Array<!proto.StreamingTranscriptionPiece>} value
 * @return {!proto.StreamingTranscription} returns this
*/
proto.StreamingTranscription.prototype.setPieceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.StreamingTranscriptionPiece=} opt_value
 * @param {number=} opt_index
 * @return {!proto.StreamingTranscriptionPiece}
 */
proto.StreamingTranscription.prototype.addPiece = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.StreamingTranscriptionPiece, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.StreamingTranscription} returns this
 */
proto.StreamingTranscription.prototype.clearPieceList = function() {
  return this.setPieceList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StreamingTranscriptionPiece.prototype.toObject = function(opt_includeInstance) {
  return proto.StreamingTranscriptionPiece.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StreamingTranscriptionPiece} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamingTranscriptionPiece.toObject = function(includeInstance, msg) {
  var f, obj = {
    transcribedtext: jspb.Message.getFieldWithDefault(msg, 1, ""),
    begintimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endtimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transcribedtype: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StreamingTranscriptionPiece}
 */
proto.StreamingTranscriptionPiece.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StreamingTranscriptionPiece;
  return proto.StreamingTranscriptionPiece.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StreamingTranscriptionPiece} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StreamingTranscriptionPiece}
 */
proto.StreamingTranscriptionPiece.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranscribedtext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBegintimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndtimestamp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTranscribedtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StreamingTranscriptionPiece.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StreamingTranscriptionPiece.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StreamingTranscriptionPiece} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StreamingTranscriptionPiece.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranscribedtext();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBegintimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEndtimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTranscribedtype();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string transcribedText = 1;
 * @return {string}
 */
proto.StreamingTranscriptionPiece.prototype.getTranscribedtext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.StreamingTranscriptionPiece} returns this
 */
proto.StreamingTranscriptionPiece.prototype.setTranscribedtext = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 beginTimestamp = 2;
 * @return {number}
 */
proto.StreamingTranscriptionPiece.prototype.getBegintimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.StreamingTranscriptionPiece} returns this
 */
proto.StreamingTranscriptionPiece.prototype.setBegintimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 endTimestamp = 3;
 * @return {number}
 */
proto.StreamingTranscriptionPiece.prototype.getEndtimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.StreamingTranscriptionPiece} returns this
 */
proto.StreamingTranscriptionPiece.prototype.setEndtimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 transcribedType = 4;
 * @return {number}
 */
proto.StreamingTranscriptionPiece.prototype.getTranscribedtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.StreamingTranscriptionPiece} returns this
 */
proto.StreamingTranscriptionPiece.prototype.setTranscribedtype = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto);
